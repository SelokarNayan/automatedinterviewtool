import os
from kivy.uix.modalview import ModalView
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout
from kivy.properties import ObjectProperty
from kivymd.app import MDApp
from kivymd.uix.dialog import MDDialog
from kivy.uix.screenmanager import Screen, ScreenManager
from kivy.lang import Builder
from kivy.uix.filechooser import FileChooserIconView
import tkinter as tk
from tkinter import filedialog
import shutil

Builder.load_string("""
<RegistrationScreen>:
    name: 'registration_screen'
    BoxLayout:
        orientation: 'vertical'
        MDTextField:
            id: name_field
            hint_text: 'Name'
            mode: 'rectangle'
        MDTextField:
            id: email_field
            hint_text: 'Email'
            mode: 'rectangle'
        MDTextField:
            id: dob_field
            hint_text: 'Date of Birth'
            mode: 'rectangle'
        Button:
            text: 'Upload ID proof'
            on_release: root.upload_id_proof()
        Button:
            text: 'Register'
            on_release: root.register_user()

<RecordInterviewScreen>:
    name: 'record_interview_screen'
    BoxLayout:
        orientation: 'vertical'
        MDLabel:
            text: 'Record a short video interview'
            halign: 'center'
        Button:
            text: 'Start Recording'
            on_release: root.start_recording()
        Button:
            text: 'Stop Recording'
            on_release: root.stop_recording()
        Button:
            text: 'Submit'
            on_release: root.submit_video()

<SummaryScreen>:
    name: 'summary_screen'
    BoxLayout:
        orientation: 'vertical'
        MDLabel:
            id: summary_label
            text: ''
            halign: 'center'
        Button:
            text: 'Back to Registration'
            on_release: root.back_to_registration()

""")


class RegistrationScreen(Screen):
    def upload_id_proof(self):
        root = tk.Tk()
        root.withdraw()
        file_path = filedialog.askopenfilename(filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg"), ("PDF files", "*.pdf")])
        return file_path


    def select_id_proof(self, file_chooser, selection):
        if selection:
            # Code for uploading the selected file
            file_path = selection[0]
            print(f"Selected file: {file_path}")

            # Save the selected file to the current working directory
            file_name = file_path.split("/")[-1]  # Extract file name from path
            shutil.copy(file_path, file_name)
            print(f"File saved as: {file_name}")

        else:
            print("No file selected")

    def register_user(self):
        name = self.ids['name_field'].text
        email = self.ids['email_field'].text
        dob = self.ids['dob_field'].text

        # Create a new user instance with the provided details
        user = User(name, email, dob)

        # Register the user
        user.register()

        # Switch to the record interview screen
        self.manager.current = 'record_interview_screen'

class User:
    def __init__(self, name, email, dob):
        self.name = name
        self.email = email
        self.dob = dob

    def register(self):
        # Code for registering the user goes here
        print(f"Registered user: {self.name}, {self.email}, {self.dob}")

class RecordInterviewScreen(Screen):
    def start_recording(self):
        # Code for starting video recording
        pass

    def stop_recording(self):
        # Code for stopping video recording
        pass

    def submit_video(self):
        # Code for submitting the recorded video

        # Switch to the summary screen
        self.manager.current = 'summary_screen'

        # Set the summary label text
        summary_label = self.manager.get_screen('summary_screen').ids['summary_label']
        summary_label.text = 'Summary of recorded interview goes here'


class SummaryScreen(Screen):
    def back_to_registration(self):
        self.manager.current = 'registration_screen'


class InterviewApp(MDApp):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(RegistrationScreen())
        sm.add_widget(RecordInterviewScreen())
        sm.add_widget(SummaryScreen())
        return sm


if __name__ == '__main__':
    InterviewApp().run()


